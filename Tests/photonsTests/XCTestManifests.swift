#if !canImport(ObjectiveC)
import XCTest

extension ExecutionContextTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExecutionContextTests = [
        ("testTaskRunOnBackground", testTaskRunOnBackground),
        ("testTaskRunOnMain", testTaskRunOnMain),
        ("testTaskRunWithAtomic", testTaskRunWithAtomic),
        ("testTaskRunWithDelay", testTaskRunWithDelay),
        ("testTaskWithVoidInput", testTaskWithVoidInput),
    ]
}

extension FutureBasicTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FutureBasicTests = [
        ("testAsyncResolvingWithDelayFuture", testAsyncResolvingWithDelayFuture),
        ("testFutureWithInitialValue", testFutureWithInitialValue),
        ("testMultithradResolvingFuture", testMultithradResolvingFuture),
        ("testResolvingFuture", testResolvingFuture),
        ("testResolvingMultipleTimesInTheMiddleOfAddingCompletion1", testResolvingMultipleTimesInTheMiddleOfAddingCompletion1),
        ("testResolvingMultipleTimesInTheMiddleOfAddingCompletion2", testResolvingMultipleTimesInTheMiddleOfAddingCompletion2),
        ("testResolvingOnceInTheMiddleWhenConcurrentlyAddingCompletionFuture", testResolvingOnceInTheMiddleWhenConcurrentlyAddingCompletionFuture),
        ("testResolvingOnceWhenConcurrentlyAddingCompletionFuture", testResolvingOnceWhenConcurrentlyAddingCompletionFuture),
        ("testResolvingOnceWithManyCompletionFuture", testResolvingOnceWithManyCompletionFuture),
        ("testResolvingTwiceOneInTheMiddleOfAddingCompletion_AndOneInCompletingOfAddingCompletion", testResolvingTwiceOneInTheMiddleOfAddingCompletion_AndOneInCompletingOfAddingCompletion),
        ("testSimpleFuture", testSimpleFuture),
    ]
}

extension FutureFlatMapOperatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FutureFlatMapOperatorTests = [
        ("testFlatMapOperator_FlatMapFutureResolvedLately", testFlatMapOperator_FlatMapFutureResolvedLately),
        ("testFlatMapOperator_FlatMapFutureResolvedLatelyWithDelay", testFlatMapOperator_FlatMapFutureResolvedLatelyWithDelay),
        ("testFlatMapOperator_OriginalFutureResolvedImmediately", testFlatMapOperator_OriginalFutureResolvedImmediately),
        ("testFlatMapOperator_OriginalFutureResolvedLately", testFlatMapOperator_OriginalFutureResolvedLately),
        ("testFlatMapOperator_OriginalFutureResolvedLatelyWithDelay", testFlatMapOperator_OriginalFutureResolvedLatelyWithDelay),
        ("testFlatMapOperatorToDifferentType_FlatMapFutureResolvedLately", testFlatMapOperatorToDifferentType_FlatMapFutureResolvedLately),
        ("testFlatMapOperatorToDifferentType_OriginalFutureResolvedImmediately", testFlatMapOperatorToDifferentType_OriginalFutureResolvedImmediately),
        ("testFlatMapOperatorToDifferentType_OriginalFutureResolvedLately", testFlatMapOperatorToDifferentType_OriginalFutureResolvedLately),
        ("testFlatMapOperatorWithDelay_OriginalFutureResolvedImmediately", testFlatMapOperatorWithDelay_OriginalFutureResolvedImmediately),
    ]
}

extension FutureInitResolverTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FutureInitResolverTests = [
        ("testInitWithResolver", testInitWithResolver),
        ("testInitWithResolver_ResolveMultipleTimes", testInitWithResolver_ResolveMultipleTimes),
        ("testInitWithResolver_ResolveMultipleTimesWithDelay", testInitWithResolver_ResolveMultipleTimesWithDelay),
        ("testInitWithResolver_ResolveWithDelay", testInitWithResolver_ResolveWithDelay),
        ("testInitWithResolver_ResolveWithDelay_nilReferenceBeforeSubscribing", testInitWithResolver_ResolveWithDelay_nilReferenceBeforeSubscribing),
        ("testInitWithResolver_ResolveWithNODelay_nilReferenceBeforeSubscribing", testInitWithResolver_ResolveWithNODelay_nilReferenceBeforeSubscribing),
        ("testInitWithResolver_WithoutResolving", testInitWithResolver_WithoutResolving),
    ]
}

extension FutureMapOperatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FutureMapOperatorTests = [
        ("testMapOperator_OriginalFutureResolvedImmediately", testMapOperator_OriginalFutureResolvedImmediately),
        ("testMapOperator_OriginalFutureResolvedLately", testMapOperator_OriginalFutureResolvedLately),
        ("testMapOperatorToDifferentType_OriginalFutureResolvedImmediately", testMapOperatorToDifferentType_OriginalFutureResolvedImmediately),
        ("testMapOperatorToDifferentType_OriginalFutureResolvedLately", testMapOperatorToDifferentType_OriginalFutureResolvedLately),
        ("testMapOperatorWithDelayResolving_OriginalFutureResolvedImmediately", testMapOperatorWithDelayResolving_OriginalFutureResolvedImmediately),
        ("testMapOperatorWithDelayResolving_OriginalFutureResolvedLately", testMapOperatorWithDelayResolving_OriginalFutureResolvedLately),
    ]
}

extension FutureMappingTest {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FutureMappingTest = [
        ("testFutureFlatMap", testFutureFlatMap),
        ("testFutureMapWithInitialValue", testFutureMapWithInitialValue),
        ("testFutureMapWithoutInitialValue", testFutureMapWithoutInitialValue),
        ("testFutureMapWithoutResolvingValue", testFutureMapWithoutResolvingValue),
    ]
}

extension FutureSubscriptionContextTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FutureSubscriptionContextTests = [
        ("testSubscribeOnBackgroundContext", testSubscribeOnBackgroundContext),
        ("testSubscribeOnCurrentContext", testSubscribeOnCurrentContext),
        ("testSubscribeOnMainContext", testSubscribeOnMainContext),
        ("testSubscribeOnMainContextEvenFutureBeingResolvedBeforeSubscription", testSubscribeOnMainContextEvenFutureBeingResolvedBeforeSubscription),
        ("testSubscribeOnMainContextEvenFutureBeingResolvedBeforeSubscription2", testSubscribeOnMainContextEvenFutureBeingResolvedBeforeSubscription2),
        ("testSubscribeOnMainContextWithChaining", testSubscribeOnMainContextWithChaining),
    ]
}

extension FutureZipOperatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FutureZipOperatorTests = [
        ("testZipOperator_FutureResolvedAfterZipping", testZipOperator_FutureResolvedAfterZipping),
        ("testZipOperator_FutureResolvedImmediately", testZipOperator_FutureResolvedImmediately),
        ("testZipOperator_FutureResolvedWithResolverInit", testZipOperator_FutureResolvedWithResolverInit),
        ("testZipOperator_FutureResolvedWithResolverInit_AndDelayed", testZipOperator_FutureResolvedWithResolverInit_AndDelayed),
        ("testZipOperator_FutureResolvedZippingAndImmediateResolving", testZipOperator_FutureResolvedZippingAndImmediateResolving),
        ("testZipOperator_FutureResolvedZippingAndImmediateResolving2", testZipOperator_FutureResolvedZippingAndImmediateResolving2),
        ("testZipOperator_FutureResolvedZippingAndImmediateResolving3", testZipOperator_FutureResolvedZippingAndImmediateResolving3),
        ("testZipOperator_FutureResolvedZippingAndImmediateResolving4", testZipOperator_FutureResolvedZippingAndImmediateResolving4),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ExecutionContextTests.__allTests__ExecutionContextTests),
        testCase(FutureBasicTests.__allTests__FutureBasicTests),
        testCase(FutureFlatMapOperatorTests.__allTests__FutureFlatMapOperatorTests),
        testCase(FutureInitResolverTests.__allTests__FutureInitResolverTests),
        testCase(FutureMapOperatorTests.__allTests__FutureMapOperatorTests),
        testCase(FutureMappingTest.__allTests__FutureMappingTest),
        testCase(FutureSubscriptionContextTests.__allTests__FutureSubscriptionContextTests),
        testCase(FutureZipOperatorTests.__allTests__FutureZipOperatorTests),
    ]
}
#endif
